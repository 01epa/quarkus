package org.jboss.shamrock.maven;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;
import org.jboss.shamrock.deployment.ClassOutput;
import org.jboss.shamrock.deployment.Runner;

@Mojo(name = "run", defaultPhase = LifecyclePhase.PROCESS_CLASSES)
public class ShamrockMojo extends AbstractMojo {

    /**
     * The directory for compiled classes.
     */
    @Parameter(readonly = true, required = true, defaultValue = "${project.build.outputDirectory}")
    private File outputDirectory;

    @Parameter(defaultValue = "${project}", readonly = true, required = true)
    protected MavenProject project;

    /**
     * The directory for classes generated by processing.
     */
    @Parameter(defaultValue = "${project.build.directory}/generated-classes")
    private File generatedClassesDirectory;

    @Override
    public void execute() throws MojoExecutionException, MojoFailureException {
        Runner runner = new Runner(new ClassOutput() {
            @Override
            public void writeClass(String className, byte[] data) throws IOException {
                String location = className.replace('.', '/');
                File file = new File(outputDirectory, location + ".class");
                file.getParentFile().mkdirs();
                try (FileOutputStream out = new FileOutputStream(file)) {
                    out.write(data);
                }
            }
        });
        try {
            runner.run(outputDirectory.toPath());
        } catch (IOException e) {
            throw new MojoFailureException("Failed to run", e);
        }
    }
}
